VITA: SIMPLE KEY EXCHANGE (vita-ske, version 2a)

 A simple key negotiation protocol based on pre-shared symmetric keys that
 provides authentication, perfect forward secrecy, and is immune to replay
 attacks.

Primitives (from libsodium 1.0.15):

 • HMAC: crypto_auth_hmacsha512256 (key is 256‑bits, output is 256‑bits)
 • DH: crypto_scalarmult_curve25519 (keys are 256‑bits, output is 256‑bits)
 • HASH: crypto_generichash_blake2b (output is choosen to be 160‑bits)

Notational Conventions:

 → m
  Denotes that we receive the message m.

 ← m
  Denotes that we send the message m.

 a ‖ b
  Denotes a concatenated with b.

Description:

 Let k be a pre-shared symmetric key. Let r be a “Security Parameter Index”
 (SPI).

 Two parties participate in the protocol: an initiator and a responder.

 ----

 The initiator behaves as follows: Let n1 and n2 be random 256‑bit nonces,
 where n1 is chosen by us. Let s1 be a random ephemeral key and p1 its
 corresponding public key chosen by us, and p2 be a public key chosen by the
 other party. Let spi1 and spi2 be child SPIs, where spi1 is choosen by us.

  ← n1
  → n2 ‖ c

 Ensure c = HMAC(k, r ‖ n1 ‖ n2). Let h1 = HMAC(k, r ‖ n1 ‖ n2 ‖ spi1 ‖ p1).

  ← n1 ‖ spi1 ‖ p1 ‖ h1
  → spi2 ‖ p2 ‖ h2

 Ensure that h2 = HMAC(k, r ‖ n2 ‖ n1 ‖ spi2 ‖ p2).

 Let q = DH(s1, p2), and ensure that p2 is a valid argument. Let
 rx = HASH(q ‖ p1 ‖ p2) and tx = HASH(q ‖ p2 ‖ p1) be key material. Assign
 (spi1, rx) to the inbound “Security Association” (SA), and (spi2, tx) to the
 outbound SA.

 Discard s1, n1, n2, p1, and p2.

 ----

 The responder behaves as follows: Let nc, n1 and n2 be random 256‑bit nonces,
 where n1 is chosen by us. Let s1 be a random ephemeral key and p1 its
 corresponding public key chosen by us, and p2 be a public key chosen by the
 other party. Let spi1 and spi2 be child SPIs, where spi1 is choosen by us.

  ← nc

 Let c = HMAC(k, r ‖ nc ‖ n1).

  → n1 ‖ c
  ← n2 ‖ spi2 ‖ p2 ‖ h2

 Ensure that h2 = HMAC(k, r ‖ n2 ‖ n1 ‖ spi2 ‖ p2). Let q = DH(s1, p2), and
 ensure that p2 is a valid argument. Let rx = HASH(q ‖ p1 ‖ p2) and
 tx = HASH(q ‖ p2 ‖ p1) be key material. Assign (spi1, rx) to the inbound
 “Security Association” (SA), and (spi2, tx) to the outbound SA.
 Let h1 = HMAC(k, r ‖ n1 ‖ n2 ‖ spi1 ‖ p1).

  → spi1 ‖ p1 ‖ h1

 Discard s1, n1, n2, p1, and p2.

Security Proof:

 Assuming an attacker can not guess k, and n1 has enough entropy so that the
 probability that the tuple (n1, p2) has occurred before is negligible, they
 are unable to produce the value h2 = HMAC(k, r ‖ n2 ‖ n1 ‖ spi2 ‖ p2), and
 thus are unable to complete a key exchange.

 Assuming an attacker can not guess s1 or s2, they are unable to produce
 q = DH(s1, p2) or q = DH(s2, p1), and subsequently derive rx or tx, and thus
 perfect forward secrecy is provided.

 A party that adheres to the protocol will not produce a tuple (spi1, p1, h1)
 unless it has previously authenticated either the tuple (n2, spi2, p2, h2), or
 the tuple (n2, c), and thus can not be used as an oracle.

Notes:

 • The outputs of this protocol are choosen specifically to support the AES-GCM
   algorithm with 128‑bit keys as used in an IPsec ESP data plane.

 • Future versions of this protocol may introduce the use of a key derivation
   function (KDF), such as libsodium’s crypto_kdf_blake2b_derive_from_key, to
   derive additional key material from rx or tx.

References:

 • The spiped protocol:
   https://github.com/Tarsnap/spiped/blob/d1e62a8/DESIGN.md#spiped-design

 • Additional discussion of the spiped protocol:
   https://github.com/Tarsnap/spiped/issues/151

 • The Sodium crypto library (libsodium):
   https://download.libsodium.org/doc/

 • Security Architecture for the Internet Protocol:
   https://tools.ietf.org/html/rfc4301

 • The use of AES-GCM in IPsec ESP:
   https://tools.ietf.org/html/rfc4106
