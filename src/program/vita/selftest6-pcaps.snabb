#!snabb snsh

-- Use of this source code is governed by the GNU AGPL license; see COPYING.

local pcap = require("lib.pcap.pcap")
local ethernet = require("lib.protocol.ethernet")
local ipv6 = require("lib.protocol.ipv6")
local icmp = require("lib.protocol.icmp.header")
local esp = require("lib.ipsec.esp")
local datagram = require("lib.protocol.datagram")
local ffi = require("ffi")

-- Synopsis:
--
--    sudo selftest6-pcaps.snabb
--
-- Source selftest-*-in.pcap with packets that exercise various corner cases in
-- Vita. Anything thatâ€™s not the happy path. IPv6 version.

PcapLog = {}

function PcapLog:new (filename)
   local o = {}
   o.file = io.open(filename, "w")
   pcap.write_file_header(o.file)
   return setmetatable(o, {__index=PcapLog})
end

function PcapLog:write (p)
   pcap.write_record(self.file, p.data, p.length)
end

local private = PcapLog:new("program/vita/selftest6-private-in.pcap")
local public = PcapLog:new("program/vita/selftest6-public-in.pcap")

local private_src = ipv6:pton("c0a8:0::1")
local private_dst = ipv6:pton("c0a8:0a00::1")
local public_src = ipv6:pton("203:0:0::1")
local public_dst = ipv6:pton("203:0:113::1")
local remote_dst = ipv6:pton("c0a8:0a00::2")

function icmp6 (conf)
   local payload = conf.payload or packet.from_string("0000Hello, World!")
   local length = conf.payload_length or payload.length
   local msg = datagram:new(payload)
   local icm = icmp:new(conf.type, conf.code)
   local ip6 = ipv6:new{
      payload_length = icmp:sizeof() + length,
      hop_limit = conf.ttl or 64,
      next_header = conf.protocol or 58,
      src = conf.src,
      dst = conf.dst
   }
   icm:checksum(msg:payload(), conf.payload_length or payload.length, ip6)
   icm:header().checksum = conf.icmp_checksum or icm:header().checksum
   msg:push(icm)
   msg:push(ip6)
   msg:push(ethernet:new{type=0x86dd})
   return msg:packet()
end

local sa = esp.encrypt:new{
   aead = "aes-gcm-16-icv",
   spi = 1001,
   key = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
   salt = "00 00 00 00"
}

local sa_bad_spi = esp.encrypt:new{
   aead = "aes-gcm-16-icv",
   spi = 0,
   key = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
   salt = "00 00 00 00"
}

local sa_replay = esp.encrypt:new{
   aead = "aes-gcm-16-icv",
   spi = 1001,
   key = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
   salt = "00 00 00 00"
}

function encap6 (payload, conf)
   payload = (conf.sa or sa):encapsulate_tunnel(
      packet.shiftleft(payload, ethernet:sizeof()),
      conf.nh or 41
   )
   local d = datagram:new(payload)
   d:push(ipv6:new{
             payload_length = (conf.length or payload.length),
             hop_limit = conf.ttl or 64,
             next_header = esp.PROTOCOL,
             src = conf.src,
             dst = conf.dst
   })
   d:push(ethernet:new{type=0x86dd})
   return d:packet()
end

-- Echo request
private:write(icmp6{
                type = 128,
                src = private_src,
                dst = private_dst
})
public:write(icmp6{
                type = 128,
                src = public_src,
                dst = public_dst
})
-- Broken echo request (too short)
private:write(icmp6{
                type = 128,
                src = private_src,
                dst = private_dst,
                payload_length = 10000
})
-- Broken echo request (too long)
private:write(icmp6{
                type = 128,
                src = private_src,
                dst = private_dst,
                payload_length = 4
})
-- Echo reply
private:write(icmp6{
                type = 129,
                src = private_src,
                dst = private_dst
})
-- Encapsulated echo request
public:write(encap6(
                icmp6{
                   type = 128,
                   src = remote_dst,
                   dst = private_dst
                },
                {
                   src = public_src,
                   dst = public_dst
                }
))
-- Unreachable protocol (private/public/inbound)
private:write(icmp6{
                protocol = 42,
                src = private_src,
                dst = private_dst,
                payload = packet.from_string(("x"):rep(2000))
})
public:write(icmp6{
                protocol = 42,
                src = public_src,
                dst = public_dst,
                payload = packet.from_string(("x"):rep(2000))
})
public:write(encap6(
                icmp6{
                   protocol = 42,
                   src = remote_dst,
                   dst = private_dst
                },
                {
                   src = public_src,
                   dst = public_dst
                }
))
-- PMTUD
private:write(icmp6{
                 payload = packet.resize(packet.allocate(), 8000),
                 src = private_src,
                 dst = remote_dst
})
-- TTL expired (private/inbound)
private:write(icmp6{
                 type = 128,
                 src = private_src,
                 dst = remote_dst,
                 ttl = 0
})
public:write(encap6(
                icmp6{
                   type = 128,
                   src = remote_dst,
                   dst = remote_dst,
                   ttl = 0
                },
                {
                   src = public_src,
                   dst = public_dst
                }
))
-- Bogus SPI
public:write(encap6(
                icmp6{
                   type = 128,
                   src = remote_dst,
                   dst = private_dst
                },
                {
                   sa = sa_bad_spi,
                   src = public_src,
                   dst = public_dst
                }
))
-- Bogus SeqNo
public:write(encap6(
                icmp6{
                   type = 128,
                   src = remote_dst,
                   dst = private_dst
                },
                {
                   sa = sa_replay,
                   src = public_src,
                   dst = public_dst
                }
))
-- Bogus NextHeader
public:write(encap6(
                icmp6{
                   type = 128,
                   src = remote_dst,
                   dst = private_dst
                },
                {
                   src = public_src,
                   dst = public_dst,
                   nh = 42
                }
))
-- Bogus checksums
private:write(icmp6{
                type = 128,
                src = private_src,
                dst = private_dst,
                icmp_checksum = 42
})
-- Padded inbound packet
public:write(encap6(
                packet.resize(
                   icmp6{
                      type = 128,
                      src = remote_dst,
                      dst = ipv6:pton("c0a8:0a00::10")
                   },
                   514),
                {
                   src = public_src,
                   dst = public_dst,
                   pad_to = 500
                }
))
-- Various ICMPv6 messages
local payload = packet.from_string("....012345678901234567890123456789012345")
for _, msgtype in ipairs({
      {type=1, codes={0,1,2,3,4,5,6,100}},
      {type=2, codes={0,100}},
      {type=3, codes={0,1,100}},
      {type=4, codes={0,1,2,100}},
      {type=100, codes={0}}
}) do
   for _, code in ipairs(msgtype.codes) do
      private:write(icmp6{
                      payload = packet.clone(payload),
                      type = msgtype.type,
                      code = code,
                      src = private_src,
                      dst = private_dst
      })
   end
end
