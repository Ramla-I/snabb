#!snabb snsh

engine.main({duration=.1})

-- Use of this source code is governed by the GNU AGPL license; see COPYING.

local vita = require("program.vita.vita")
local nd_light = require("apps.ipv6.nd_light").nd_light
local basic_apps = require("apps.basic.basic_apps")
local pcap = require("apps.pcap.pcap")
local filter = require("apps.packet_filter.pcap_filter")
local match = require("apps.test.match")
local counter = require("core.counter")
local shm = require("core.shm")
local ffi = require("ffi")

-- Synopsis:
--
--    sudo selftest6.snabb [regenerate]
--
-- Basic event-sourced (selftest6-*-in.pcap) test that exercises various
-- non-happy paths of Vita. Regenerates reference outputs (selftest6-*-out.pcap)
-- when called with an argument. IPv6 version.
--
-- TODO: doesnâ€™t exercise KeyManager yet.

local regenerate_pcaps = main.parameters[1]

local cfg = {
   data_plane = true,
   private_interface6 = {
      pci = "00:00.0",
      ip = "c0a8:0a00::1",
      nexthop_ip = "c0a8:0::1",
      mac = "52:54:00:00:00:00",
   },
   public_interface6 = {
      ["203:0:113::1"] = {
         pci = "00:00.0",
         nexthop_ip = "203::1",
         mac = "52:54:00:00:00:FF",
         queue = 1
      }
   },
   mtu = 500,
   route6 = {
      loopback = {
         net = "c0a8:0a00::0/24",
         gateway = { ["203:0:113::1"] = {queue=1} },
         preshared_key = string.rep("00", 32),
         spi = 1001
      }
   },
   sa_database = {
      [1] = {
         outbound_sa = {
            [1001] = {
               route = "loopback",
               aead = "aes-gcm-16-icv",
               key = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
               salt = "00 00 00 00"
            }
         },
         inbound_sa =  {
            [1001] = {
               route = "loopback",
               aead = "aes-gcm-16-icv",
               key = "00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00",
               salt = "00 00 00 00",
               auditing = true
            }
         }
      }
   }
}

-- Configure Vita queue (without KeyManager.)
local c, private, public = vita.configure_vita_queue(cfg, 1, 'free')

-- Add ND resolvers.
config.app(c, "private_nd", nd_light, {
              local_mac = "52:54:00:00:00:01",
              local_ip = "c0a8:0::1",
              next_hop = "c0a8:0a00::1"
})
config.app(c, "public_nd", nd_light, {
              local_mac = "52:54:00:00:00:FE",
              local_ip = "203::1",
              next_hop = "203:0:113::1"
})
config.link(c, "private_nd.south -> "..private.input)
config.link(c, private.output.." -> private_nd.south")
config.link(c, "public_nd.south -> "..public.input)
config.link(c, public.output.." -> public_nd.south")

-- Loopback ESP traffic.
config.app(c, "public_out", basic_apps.Tee)
config.app(c, "join", basic_apps.Join)
config.app(c, "filter", filter.PcapFilter, {filter="ip6 proto esp"})
config.link(c, "public_nd.north -> public_out.input")
config.link(c, "public_out.loopback -> filter.input")
config.link(c, "filter.output -> join.loopback")
config.link(c, "join.output -> public_nd.north")

-- Add PCAP sources and sinks.
config.app(c, "private_pcap_in", pcap.PcapReader,
           "program/vita/selftest6-private-in.pcap")
config.app(c, "public_pcap_in", pcap.PcapReader,
           "program/vita/selftest6-public-in.pcap")
config.link(c, "private_pcap_in.output -> private_nd.north")
config.link(c, "public_pcap_in.output -> join.input")
if regenerate_pcaps then
   -- Regenerate reference outputs.
   config.app(c, "private_pcap_out", pcap.PcapWriter,
              "program/vita/selftest6-private-out.pcap")
   config.app(c, "public_pcap_out", pcap.PcapWriter,
              "program/vita/selftest6-public-out.pcap")
   config.link(c, "private_nd.north -> private_pcap_out.input")
   config.link(c, "public_out.output -> public_pcap_out.input")
else
   -- Match reference outputs.
   config.app(c, "private_pcap_out", pcap.PcapReader,
              "program/vita/selftest6-private-out.pcap")
   config.app(c, "public_pcap_out", pcap.PcapReader,
              "program/vita/selftest6-public-out.pcap")
   config.app(c, "match_private", match.Match, {})
   config.link(c, "private_pcap_out.output -> match_private.comparator")
   config.link(c, "private_nd.north -> match_private.rx")
   config.app(c, "match_public", match.Match, {})
   config.link(c, "public_pcap_out.output -> match_public.comparator")
   config.link(c, "public_out.output -> match_public.rx")
end

engine.configure(c)

-- Hack to avoid ESP seq# reuse because of packets from public_in.pcap
engine.app_table.OutboundSA_loopback.sa.seq.no = 100

-- Run engine until its idle (all packets have been processed).
local last_frees = counter.read(engine.frees)
local function is_idle ()
   if counter.read(engine.frees) == last_frees then return true
   else last_frees = counter.read(engine.frees) end
end
engine.main({done=is_idle})

if regenerate_pcaps then
   -- Print final statistics.
   engine.report_links()
   for appname, app in pairs(engine.app_table) do
      if app.shm then
         print()
         print(appname)
         for name, _ in pairs(app.shm.specs) do
            local value = counter.read(app.shm[name])
            if value > 0 then
               print(("%00d %s"):format(tonumber(value), name))
            end
         end
      end
   end
else
   -- Assert application state is as expected.
   if #engine.app_table.match_private:errors() > 0 then
      engine.app_table.match_private:report()
      main.exit(1)
   end
   if #engine.app_table.match_public:errors() > 0 then
      engine.app_table.match_public:report()
      main.exit(1)
   end
   for app, counters in pairs{
      PrivateRouter = {
         rxerrors = 1,
         mtu_errors = 1 -- PMTUD
      },
      PublicRouter = {
         route_errors = 1 -- Bogus SPI
      },
      InboundSA_loopback_1001 = { -- Bogus SeqNo, Bogus NextHeader
         rxerrors = 2,
         protocol_errors = 1,
         decrypt_errors = 1
      },
      PrivateICMP6 = {
         echo_request = 2, -- Echo request, Broken echo request (too long)
         destination_unreachable = 8,-- Standard codes, Code 100
         net_unreachable = 1,
         destination_denied = 1,
         scope_denied = 1,
         host_unreachable = 1,
         port_unreachable = 1,
         source_denied = 1,
         net_denied = 1,
         packet_too_big = 2, -- Code 0, Code 100
         time_exceeded = 3, -- Standard codes, Code 100
         fragment_reassembly_time_exceeded = 1,
         transit_hop_limit_exceeded = 1,
         parameter_problem = 4, -- Standard codes, Code 100
         next_header_problem = 1,
         header_field_problem = 1,
         option_problem = 1,
         rxerrors = 4,
         protocol_errors = 2, -- Broken echo request (too short), Bogus checksum
         type_not_implemented_errors = 2, -- Echo reply, Type 100
         code_not_implemented_errors = 3 -- Code 100
      },
      PublicICMP6 = {
         echo_request = 1 -- Echo request

      },
      InboundICMP6 = { -- Encapsulated echo request
         echo_request = 1
      }
   } do
      for name, should in pairs(counters) do
         local actual = tonumber(counter.read(engine.app_table[app].shm[name]))
         assert(should == actual,
                name.." should be "..should.." but is "..actual)
      end
   end
end
